// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// $Rev: 18756 $
// File generated on 1/31/2011 10:11:09 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Users\Lena\Documents\RAD Studio\Projects\SAP2010_svn\SAP2011 (1)
// LIBID: {F5F03B92-C44F-49A4-B4B7-43F56ECD1AC0}
// LCID: 0
// Helpfile:
// HelpString:
// DepndLst:
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
//   (2) v4.0 StdVCL, (stdvcl40.dll)
// ************************************************************************ //
#ifndef   SAP2011_TLBH
#define   SAP2011_TLBH

#pragma option push -b -a4 -w-inl

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Sap2011_tlb
{

// *********************************************************************//
// HelpString:
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SAP2011;
extern __declspec (package) const GUID IID_ISAPObject;
extern __declspec (package) const GUID DIID_ISAPObjectEvents;
extern __declspec (package) const GUID CLSID_SAPObject;
extern __declspec (package) const GUID IID_ISAP_COM;
extern __declspec (package) const GUID CLSID_SAP_COM;
extern __declspec (package) const GUID IID_ISAP2011;
extern __declspec (package) const GUID CLSID_SAP2011_;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
interface DECLSPEC_UUID("{513B09CE-4F80-4445-95E1-1F53A5A04ED0}") ISAPObject;
typedef TComInterface<ISAPObject, &IID_ISAPObject> ISAPObjectPtr;

interface DECLSPEC_UUID("{805271EB-5F36-46DD-9F0B-D0DFFD1CFD20}") ISAPObjectEvents;
typedef TComInterface<ISAPObjectEvents, &DIID_ISAPObjectEvents> ISAPObjectEventsPtr;

interface DECLSPEC_UUID("{2C628524-3433-451E-A8F2-E8E165E286F1}") ISAP_COM;
typedef TComInterface<ISAP_COM, &IID_ISAP_COM> ISAP_COMPtr;

interface DECLSPEC_UUID("{21361BB6-5C51-44A6-89A6-7E61A8BFCE98}") ISAP2011;
typedef TComInterface<ISAP2011, &IID_ISAP2011> ISAP2011Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef ISAPObject SAPObject;
typedef ISAPObjectPtr SAPObjectPtr;
typedef ISAP_COM SAP_COM;
typedef ISAP_COMPtr SAP_COMPtr;
typedef ISAP2011 SAP2011_;
typedef ISAP2011Ptr SAP2011_Ptr;

#define LIBID_OF_SAPObject (&LIBID_SAP2011)
#define LIBID_OF_SAP_COM (&LIBID_SAP2011)
#define LIBID_OF_SAP2011_ (&LIBID_SAP2011)
// *********************************************************************//
// Interface: ISAPObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {513B09CE-4F80-4445-95E1-1F53A5A04ED0}
// *********************************************************************//
interface ISAPObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE SoundList1Add(BSTR FileName/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE SoundList1Clear(void) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE SoundList2Add(BSTR FileName/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SoundList2Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE DoBatch(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE SetBatchDir(BSTR DirName/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE Init(long ButtonNumber/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE DeleteRecords(void) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE SetBatchMode(long BatchMode/*[in]*/) = 0; // [209]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISAPObjectEvents
// Flags:     (0)
// GUID:      {805271EB-5F36-46DD-9F0B-D0DFFD1CFD20}
// *********************************************************************//
interface ISAPObjectEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: ISAP_COM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C628524-3433-451E-A8F2-E8E165E286F1}
// *********************************************************************//
interface ISAP_COM  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISAP2011
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21361BB6-5C51-44A6-89A6-7E61A8BFCE98}
// *********************************************************************//
interface ISAP2011  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMISAPObject
// Interface: ISAPObject
// *********************************************************************//
template <class T /* ISAPObject */ >
class TCOMISAPObjectT : public TComInterface<ISAPObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISAPObjectT() {}
  TCOMISAPObjectT(ISAPObject *intf, bool addRef = false) : TComInterface<ISAPObject>(intf, addRef) {}
  TCOMISAPObjectT(const TCOMISAPObjectT& src) : TComInterface<ISAPObject>(src) {}
  TCOMISAPObjectT& operator=(const TCOMISAPObjectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall SoundList1Add(BSTR FileName/*[in]*/);
  HRESULT         __fastcall SoundList1Clear(void);
  HRESULT         __fastcall SoundList2Add(BSTR FileName/*[in]*/);
  HRESULT         __fastcall SoundList2Clear(void);
  HRESULT         __fastcall DoBatch(void);
  HRESULT         __fastcall SetBatchDir(BSTR DirName/*[in]*/);
  HRESULT         __fastcall Init(long ButtonNumber/*[in]*/);
  HRESULT         __fastcall DeleteRecords(void);
  HRESULT         __fastcall SetBatchMode(long BatchMode/*[in]*/);

};
typedef TCOMISAPObjectT<ISAPObject> TCOMISAPObject;

// *********************************************************************//
// DispIntf:  ISAPObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {513B09CE-4F80-4445-95E1-1F53A5A04ED0}
// *********************************************************************//
template<class T>
class ISAPObjectDispT : public TAutoDriver<ISAPObject>
{
public:
  ISAPObjectDispT(){}

  ISAPObjectDispT(ISAPObject *pintf)
  {
    TAutoDriver<ISAPObject>::Bind(pintf, false);
  }

  ISAPObjectDispT(ISAPObjectPtr pintf)
  {
    TAutoDriver<ISAPObject>::Bind(pintf, true);
  }

  ISAPObjectDispT& operator=(ISAPObject *pintf)
  {
    TAutoDriver<ISAPObject>::Bind(pintf, false);
    return *this;
  }

  ISAPObjectDispT& operator=(ISAPObjectPtr pintf)
  {
    TAutoDriver<ISAPObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SAPObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SAPObject);
  }

  HRESULT         __fastcall SoundList1Add(BSTR FileName/*[in]*/);
  HRESULT         __fastcall SoundList1Clear();
  HRESULT         __fastcall SoundList2Add(BSTR FileName/*[in]*/);
  HRESULT         __fastcall SoundList2Clear();
  HRESULT         __fastcall DoBatch();
  HRESULT         __fastcall SetBatchDir(BSTR DirName/*[in]*/);
  HRESULT         __fastcall Init(long ButtonNumber/*[in]*/);
  HRESULT         __fastcall DeleteRecords();
  HRESULT         __fastcall SetBatchMode(long BatchMode/*[in]*/);

};
typedef ISAPObjectDispT<ISAPObject> ISAPObjectDisp;

// *********************************************************************//
// DispIntf:  ISAPObjectEvents
// Flags:     (0)
// GUID:      {805271EB-5F36-46DD-9F0B-D0DFFD1CFD20}
// *********************************************************************//
template <class T>
class ISAPObjectEventsDispT : public TAutoDriver<ISAPObjectEvents>
{
public:
  ISAPObjectEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef ISAPObjectEventsDispT<ISAPObjectEvents> ISAPObjectEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMISAP_COM
// Interface: ISAP_COM
// *********************************************************************//
template <class T /* ISAP_COM */ >
class TCOMISAP_COMT : public TComInterface<ISAP_COM>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISAP_COMT() {}
  TCOMISAP_COMT(ISAP_COM *intf, bool addRef = false) : TComInterface<ISAP_COM>(intf, addRef) {}
  TCOMISAP_COMT(const TCOMISAP_COMT& src) : TComInterface<ISAP_COM>(src) {}
  TCOMISAP_COMT& operator=(const TCOMISAP_COMT& src) { Bind(src, true); return *this;}


};
typedef TCOMISAP_COMT<ISAP_COM> TCOMISAP_COM;

// *********************************************************************//
// DispIntf:  ISAP_COM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C628524-3433-451E-A8F2-E8E165E286F1}
// *********************************************************************//
template<class T>
class ISAP_COMDispT : public TAutoDriver<ISAP_COM>
{
public:
  ISAP_COMDispT(){}

  ISAP_COMDispT(ISAP_COM *pintf)
  {
    TAutoDriver<ISAP_COM>::Bind(pintf, false);
  }

  ISAP_COMDispT(ISAP_COMPtr pintf)
  {
    TAutoDriver<ISAP_COM>::Bind(pintf, true);
  }

  ISAP_COMDispT& operator=(ISAP_COM *pintf)
  {
    TAutoDriver<ISAP_COM>::Bind(pintf, false);
    return *this;
  }

  ISAP_COMDispT& operator=(ISAP_COMPtr pintf)
  {
    TAutoDriver<ISAP_COM>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SAP_COM));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SAP_COM);
  }


};
typedef ISAP_COMDispT<ISAP_COM> ISAP_COMDisp;

// *********************************************************************//
// SmartIntf: TCOMISAP2011
// Interface: ISAP2011
// *********************************************************************//
template <class T /* ISAP2011 */ >
class TCOMISAP2011T : public TComInterface<ISAP2011>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISAP2011T() {}
  TCOMISAP2011T(ISAP2011 *intf, bool addRef = false) : TComInterface<ISAP2011>(intf, addRef) {}
  TCOMISAP2011T(const TCOMISAP2011T& src) : TComInterface<ISAP2011>(src) {}
  TCOMISAP2011T& operator=(const TCOMISAP2011T& src) { Bind(src, true); return *this;}


};
typedef TCOMISAP2011T<ISAP2011> TCOMISAP2011;

// *********************************************************************//
// DispIntf:  ISAP2011
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21361BB6-5C51-44A6-89A6-7E61A8BFCE98}
// *********************************************************************//
template<class T>
class ISAP2011DispT : public TAutoDriver<ISAP2011>
{
public:
  ISAP2011DispT(){}

  ISAP2011DispT(ISAP2011 *pintf)
  {
    TAutoDriver<ISAP2011>::Bind(pintf, false);
  }

  ISAP2011DispT(ISAP2011Ptr pintf)
  {
    TAutoDriver<ISAP2011>::Bind(pintf, true);
  }

  ISAP2011DispT& operator=(ISAP2011 *pintf)
  {
    TAutoDriver<ISAP2011>::Bind(pintf, false);
    return *this;
  }

  ISAP2011DispT& operator=(ISAP2011Ptr pintf)
  {
    TAutoDriver<ISAP2011>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SAP2011_));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SAP2011_);
  }


};
typedef ISAP2011DispT<ISAP2011> ISAP2011Disp;

// *********************************************************************//
// SmartIntf: TCOMISAPObject
// Interface: ISAPObject
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SoundList1Add(BSTR FileName/*[in]*/)
{
  return (*this)->SoundList1Add(FileName);
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SoundList1Clear(void)
{
  return (*this)->SoundList1Clear();
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SoundList2Add(BSTR FileName/*[in]*/)
{
  return (*this)->SoundList2Add(FileName);
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SoundList2Clear(void)
{
  return (*this)->SoundList2Clear();
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::DoBatch(void)
{
  return (*this)->DoBatch();
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SetBatchDir(BSTR DirName/*[in]*/)
{
  return (*this)->SetBatchDir(DirName);
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::Init(long ButtonNumber/*[in]*/)
{
  return (*this)->Init(ButtonNumber);
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::DeleteRecords(void)
{
  return (*this)->DeleteRecords();
}

template <class T> HRESULT __fastcall
TCOMISAPObjectT<T>::SetBatchMode(long BatchMode/*[in]*/)
{
  return (*this)->SetBatchMode(BatchMode);
}

// *********************************************************************//
// DispIntf:  ISAPObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {513B09CE-4F80-4445-95E1-1F53A5A04ED0}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SoundList1Add(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundList1Add"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SoundList1Clear()
{
  _TDispID _dispid(*this, OLETEXT("SoundList1Clear"), DISPID(202));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SoundList2Add(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SoundList2Add"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SoundList2Clear()
{
  _TDispID _dispid(*this, OLETEXT("SoundList2Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::DoBatch()
{
  _TDispID _dispid(*this, OLETEXT("DoBatch"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SetBatchDir(BSTR DirName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetBatchDir"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = DirName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::Init(long ButtonNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Init"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = ButtonNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::DeleteRecords()
{
  _TDispID _dispid(*this, OLETEXT("DeleteRecords"), DISPID(208));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ISAPObjectDispT<T>::SetBatchMode(long BatchMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetBatchMode"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = BatchMode /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISAPObjectEvents
// Flags:     (0)
// GUID:      {805271EB-5F36-46DD-9F0B-D0DFFD1CFD20}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMISAP_COM
// Interface: ISAP_COM
// *********************************************************************//
// *********************************************************************//
// DispIntf:  ISAP_COM
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C628524-3433-451E-A8F2-E8E165E286F1}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMISAP2011
// Interface: ISAP2011
// *********************************************************************//
// *********************************************************************//
// DispIntf:  ISAP2011
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21361BB6-5C51-44A6-89A6-7E61A8BFCE98}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that
// provide static Create() and CreateRemote(LPWSTR machineName) methods
// for creating an instance of an exposed object. These functions can
// be used by client wishing to automate CoClasses exposed by this
// typelibrary.
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SAPObject
// Interface: TCOMISAPObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISAPObject, ISAPObject, &CLSID_SAPObject, &IID_ISAPObject> CoSAPObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SAP_COM
// Interface: TCOMISAP_COM
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISAP_COM, ISAP_COM, &CLSID_SAP_COM, &IID_ISAP_COM> CoSAP_COM;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SAP2011_
// Interface: TCOMISAP2011
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISAP2011, ISAP2011, &CLSID_SAP2011_, &IID_ISAP2011> CoSAP2011_;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : SAPObject
// Event Interface : ISAPObjectEvents
// *********************************************************************//
template <class T>
class TEvents_SAPObject : public IConnectionPointImpl<T,
                                                 &DIID_ISAPObjectEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
protected:
  ISAPObjectEventsDisp m_EventIntfObj;
};

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Sap2011_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Sap2011_tlb;
#endif

#pragma option pop

#endif // SAP2011_TLBH

